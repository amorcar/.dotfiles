#!/usr/bin/env bash

if [ -z "$1" ]; then
    echo "Please give a file to compile and run."
    exit
fi

filename="$1"
filename="${filename%.*}.out"

# flag="-std=c17 -O2 -Wall -Wextra -Wshadow -Wconversion -Wfloat-equal"
flag="-Wall"

# dbgFlag="-fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=float-cast-overflow -fno-sanitize-recover=all -fstack-protector-all -g"
dbgFlag="-g -O0"

# debug
if [ "$2" == "-d" ]; then
    printf "Using lldb (use r (run) and bt (backtrace))"

    printf "clang $1 $dbgFlag -o $filename && lldb $filename"

    printf "\n\n|---- \e[0;34mDebugging\e[m ----|\n\n"

    clang $1 $dbgFlag -o $filename && lldb $filename
else
    printf "clang $1 $flag -o $filename "

    printf "\n\n|----\e[0;34m Compilation output \e[m----|\n\n"

    clang $1 $flag -o $filename

    if [ $? -ne 0 ]; then
        printf "\n\n|----\e[0;31m\033[1m Errors found \e[m----|\n\n"
        exit
    fi

    printf "\n|----\e[0;34m Running (Input) \e[m----|\n\n"

    if [ "${filename:0:1}" != "/" ]; then
        filename="./$filename"
    fi

    # replace gtime with time on linux operating systems
    # time '\n|--------|\n\n  real\t%E\n  user\t%U\n  sys\t%S\n  mem\t%MKB\n' $filename
    $filename
fi
