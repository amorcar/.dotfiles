[user]
	name = amorcar
	email = alejandro.morales.carreno@gmail.com

[core]
  editor = "nvim"

  #pager = delta
  #pager = nvim -c DiffviewOpen -

  # Use custom `.gitignore` and `.gitattributes`.
	excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true


[delta]
  navigate = true  # use n and N to move between diff sections
  dark = true      # or light = true, or omit for auto-detection
  side-by-side = true
  line-numbers = false

  
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[init]
  defaultBranch = main

[pull]
  rebase = true

[merge]
	tool = nvimdiff

  conflictstyle = zdiff3

  # Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[difftool]
  prompt = true

  trustExitCode = true

[difftool "nvimdiff"]
  cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""

[diff]
  tool = nvimdiff

	# Detect copies as well as renames.
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C

[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = false

  verbose = true

  template = ~/.config/git/commit_template

[branch]
	# Show most recently changed branches first.
	sort = -committerdate


[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix
  
[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status.
	s = status

	# View the current working tree status using the short format.
	ss = status -s

	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Commit all changes.
	ca = !git add ':(exclude,attr:builtin_objectmode=160000)' && git commit -av

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Interactive branch select
  bi = !"git branch | grep '^[^*]' | fzf --height=20% --reverse --info=inline | xargs git switch"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	delete-merged = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email
